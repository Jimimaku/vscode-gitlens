import { exec } from 'child_process';
import type { ContributionsJson } from './contributions/models';
import { readFileSync, writeFileSync } from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.join(path.dirname(__filename), '..');
const relativeFilename = path.relative(__dirname, __filename).replace(/\\/g, '/');

/** Generates command types from the commands in `contributions.json` */
function generateCommandTypesFromContributions(): void {
	console.log("Generating command types into 'constants.commands.generated.ts' from contributions.json...");

	const contributions: ContributionsJson = JSON.parse(
		readFileSync(path.join(__dirname, 'contributions.json'), 'utf8'),
	);

	const commands = new Set<string>();
	const paletteCommands = new Set<string>();
	const kbCommands = new Set<string>();
	const internalCommands = new Set<string>();

	let internal: boolean;
	for (const [id, command] of Object.entries(contributions.commands)) {
		internal = true;
		if (command.menus) {
			internal = false;
			commands.add(id);

			for (const menus of Object.values(command.menus)) {
				for (const menu of menus) {
					if (menu.alt) {
						commands.add(menu.alt);
					}
				}
			}
		}

		if (command.commandPalette) {
			internal = false;
			paletteCommands.add(id);
		}

		if (command.keybindings) {
			internal = false;
			kbCommands.add(id);
		}

		if (internal) {
			internalCommands.add(id);
		}
	}

	for (const kb of contributions.keybindings) {
		kbCommands.add(kb.command);
	}

	// Remove from internal any commands that are in other lists
	for (const id of [...commands, ...paletteCommands, ...kbCommands]) {
		internalCommands.delete(id);
	}

	const contents = `// This file is generated by (vscode-gitlens)/${relativeFilename}
// Do not edit this file directly

export type ContributedCommands = ContributedKeybindingCommands | ContributedPaletteCommands | ContributedOrphansOrInternalCommands | ${[
		...commands,
	]
		.sort()
		.map(c => `'${c}'`)
		.join(' | ')};

export type ContributedPaletteCommands = ${[...paletteCommands]
		.sort()
		.map(c => `'${c}'`)
		.join(' | ')};

export type ContributedKeybindingCommands = ${[...kbCommands]
		.filter(c => c.startsWith('gitlens.'))
		.sort()
		.map(c => `'${c}'`)
		.join(' | ')};

/**
 * Commands that are not contributed anywhere, not the command palette, menus (or alts), nor keybindings.
 * Either their contribution point is missing or are simply internal and should be removed at some point
 */
export type ContributedOrphansOrInternalCommands = ${[...internalCommands]
		.sort()
		.map(c => `'${c}'`)
		.join(' | ')};

`;

	const file = path.join(__dirname, 'src', 'constants.commands.generated.ts');
	writeFileSync(file, contents, 'utf8');
	// run prettier on the generated file
	exec(`pnpm prettier --write ${file}`);

	console.log("Generated 'constants.commands.generated.ts' from contributions.json");
}

generateCommandTypesFromContributions();
